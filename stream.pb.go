// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package grpctest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UppercaseRequest struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UppercaseRequest) Reset()         { *m = UppercaseRequest{} }
func (m *UppercaseRequest) String() string { return proto.CompactTextString(m) }
func (*UppercaseRequest) ProtoMessage()    {}
func (*UppercaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{0}
}

func (m *UppercaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UppercaseRequest.Unmarshal(m, b)
}
func (m *UppercaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UppercaseRequest.Marshal(b, m, deterministic)
}
func (m *UppercaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UppercaseRequest.Merge(m, src)
}
func (m *UppercaseRequest) XXX_Size() int {
	return xxx_messageInfo_UppercaseRequest.Size(m)
}
func (m *UppercaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UppercaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UppercaseRequest proto.InternalMessageInfo

func (m *UppercaseRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UppercaseResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UppercaseResponse) Reset()         { *m = UppercaseResponse{} }
func (m *UppercaseResponse) String() string { return proto.CompactTextString(m) }
func (*UppercaseResponse) ProtoMessage()    {}
func (*UppercaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bb17ef3f514bfe54, []int{1}
}

func (m *UppercaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UppercaseResponse.Unmarshal(m, b)
}
func (m *UppercaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UppercaseResponse.Marshal(b, m, deterministic)
}
func (m *UppercaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UppercaseResponse.Merge(m, src)
}
func (m *UppercaseResponse) XXX_Size() int {
	return xxx_messageInfo_UppercaseResponse.Size(m)
}
func (m *UppercaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UppercaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UppercaseResponse proto.InternalMessageInfo

func (m *UppercaseResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UppercaseRequest)(nil), "grpctest.UppercaseRequest")
	proto.RegisterType((*UppercaseResponse)(nil), "grpctest.UppercaseResponse")
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_bb17ef3f514bfe54) }

var fileDescriptor_bb17ef3f514bfe54 = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0x2f, 0x2a, 0x48, 0x2e, 0x49,
	0x2d, 0x2e, 0x51, 0xd2, 0xe1, 0x12, 0x08, 0x2d, 0x28, 0x48, 0x2d, 0x4a, 0x4e, 0x2c, 0x4e, 0x0d,
	0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c,
	0x4f, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0x74, 0xb9, 0x04, 0x91, 0x54,
	0x17, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0xe2, 0x56, 0x6e, 0x14, 0x83, 0x64, 0x78, 0x70, 0x6a, 0x51,
	0x59, 0x66, 0x72, 0xaa, 0x90, 0x07, 0x17, 0x67, 0x48, 0x51, 0x62, 0x5e, 0x71, 0x5a, 0x7e, 0x51,
	0xae, 0x90, 0x94, 0x1e, 0xcc, 0x21, 0x7a, 0xe8, 0xae, 0x90, 0x92, 0xc6, 0x2a, 0x07, 0xb1, 0x53,
	0x89, 0x41, 0x83, 0x31, 0x89, 0x0d, 0xec, 0x17, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46,
	0xfd, 0xc7, 0xe8, 0xdb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UppercaseServiceClient is the client API for UppercaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UppercaseServiceClient interface {
	Transform(ctx context.Context, opts ...grpc.CallOption) (UppercaseService_TransformClient, error)
}

type uppercaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewUppercaseServiceClient(cc *grpc.ClientConn) UppercaseServiceClient {
	return &uppercaseServiceClient{cc}
}

func (c *uppercaseServiceClient) Transform(ctx context.Context, opts ...grpc.CallOption) (UppercaseService_TransformClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UppercaseService_serviceDesc.Streams[0], "/grpctest.UppercaseService/Transform", opts...)
	if err != nil {
		return nil, err
	}
	x := &uppercaseServiceTransformClient{stream}
	return x, nil
}

type UppercaseService_TransformClient interface {
	Send(*UppercaseRequest) error
	CloseAndRecv() (*UppercaseResponse, error)
	grpc.ClientStream
}

type uppercaseServiceTransformClient struct {
	grpc.ClientStream
}

func (x *uppercaseServiceTransformClient) Send(m *UppercaseRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uppercaseServiceTransformClient) CloseAndRecv() (*UppercaseResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UppercaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UppercaseServiceServer is the server API for UppercaseService service.
type UppercaseServiceServer interface {
	Transform(UppercaseService_TransformServer) error
}

// UnimplementedUppercaseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUppercaseServiceServer struct {
}

func (*UnimplementedUppercaseServiceServer) Transform(srv UppercaseService_TransformServer) error {
	return status.Errorf(codes.Unimplemented, "method Transform not implemented")
}

func RegisterUppercaseServiceServer(s *grpc.Server, srv UppercaseServiceServer) {
	s.RegisterService(&_UppercaseService_serviceDesc, srv)
}

func _UppercaseService_Transform_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UppercaseServiceServer).Transform(&uppercaseServiceTransformServer{stream})
}

type UppercaseService_TransformServer interface {
	SendAndClose(*UppercaseResponse) error
	Recv() (*UppercaseRequest, error)
	grpc.ServerStream
}

type uppercaseServiceTransformServer struct {
	grpc.ServerStream
}

func (x *uppercaseServiceTransformServer) SendAndClose(m *UppercaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uppercaseServiceTransformServer) Recv() (*UppercaseRequest, error) {
	m := new(UppercaseRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _UppercaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.UppercaseService",
	HandlerType: (*UppercaseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transform",
			Handler:       _UppercaseService_Transform_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
